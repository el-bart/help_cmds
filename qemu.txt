# regain keyboard/mouse from VM: Alt_L + Ctrl_L + G

# create new, empty image:
qemu-img create -f qcow2 -o size=32G disk.qcow2
# add extra space to image:
qemu-img resize disk.qcow2 +150G
# resize patition on disk:
parted /dev/sda
resizepart 1
> yes
> [enter]
# resizse FS to fit parition:
resize2fs /dev/sda1

# create CoW image, based on a base reference image (so that base is nerver changed):
qemu-img create -f qcow2 -b base_disk.qcow2 vm01.qcow2
# common image formats with example I/O speed on cont. write (for reference - underlying disk write was ~160[MB/s]):
# vdi   -> ~120[MB/s]
# qcow2 -> ~125[MB/s]
# qed   -> ~130[MB/s]
# raw   -> ~130[MB/s]


# convert VirtualBox's vdi image to QEMU's qcow2 (-p is for progress display only; -m 1 means using single thread (not to kill I/O)):
qemu-img convert -p -m 1 -f vdi -O qcow2 in.vdi out.qcow2

# remove unused (sparse) blocks from image, to save space (you did enable trimming on FS, right?)
qemu-img convert -O qcow2 input.qcow2 output.qcow2
# the same but with progress:
qemu-img convert -p -O qcow2 input.qcow2 output.qcow2
mv output.qcow2 input.qcow2


# start VM with 512MB RAM, 1 CPU, using disk image, w/o GUI
qemu-system-x86_64 \
  -drive file=os.qcow2 \
  -m 512 \
  -smp 1 \
  -device rtl8139,netdev=nd1 \
  -nographic


# KVM-based VM with 5G of RAM, 2 CPUs, NATed network (internet), Pulseaudio-based sound, and use Tails Live CD as a base
qemu-system-x86_64 \
  -enable-kvm \
  -vga virtio \
  -cdrom tails-amd64-*.iso \
  -m 5G \
  -smp 2 \
  -nic user,model=virtio-net-pci \
  -audiodev pa,id=snd0 -device AC97,audiodev=snd0


# startk VM w/o GUI display - redirect everything to the console, via serial port, instead.
# note that it requires 'console=ttyS0' to be added to kernel's command line interface
qemu-system-x86_64 \
  -enable-kvm \
  -m 3G \
  -smp 2 \
  -drive file=os.qcow2 \
  -boot order=cd \
  -display none \
  -serial mon:stdio


# make all disk changes on temporary files - will be discared when VM is stopped and started again.
qemu-system-x86_64 ... -snapshot ...


# NAT-based networking (works in userspace)
-nic user,model=virtio-net-pci

# network device that will additionally forward port to a guest
-nic user,model=virtio-net-pci,hostfwd=tcp:127.0.0.1:1234-:22

# Pulseaudio-based sound I/O
-audiodev pa,id=snd0 -device AC97,audiodev=snd0


# create network bridge (needs root):
brctl addbr vmbr0
ip link set dev vmbr0 up
ip a add 192.168.42.1/24 dev vmbr0

# add virtual 'tap' interfaces and connect to the bridge (needs root):
ip tuntap add mode tap vm0
brctl addif vmbr0 vm0

# add 2 network cards, based on 'tap' virtual interfaces, with exlicit MAC addresses.
# note that it's important to provide custom MAC addresses, as QEMU will not randomize/make these unique across many VMs!
-nic tap,ifname=vm0,script=no,downscript=no,mac=52:54:00:11:11:11
-nic tap,ifname=vm0,script=no,downscript=no,mac=52:54:00:22:22:22


# running 4 virtual screens in VM
-device virtio-vga,max_outputs=4
# note that '-vga virtio' may NOT be pased, to make this one work


#
# remote connection - VNC
#

# use VNC for X11 at localhost, port 5900+0:
-vnc 127.0.0.1:0
# alt:
-display vnc=127.0.0.1:0
# and then connect:
xtigervncviewer localhost

# or using SPICE:
-spice port=5900,addr=127.0.0.1,disable-ticketing
# and connect:
spicy --uri spice://localhost:5900
# on client also do:
apt install qemu-guest-agent


#
# remote connection - VNC
#

# qemu:
-spice port=5900,addr=127.0.0.1,disable-ticketing
# client
spicy -h localhost -p 5900


# serial port can be also exposed via websocket
-serial websocket:127.0.0.1:4242,server,nowait


#
# qemu monitor
#

# use monitor via socket
-monitor unix:./vm.monitor,server,nowait
# socket can later on be I/Oed from console via:
socat ./monitor.socket STDIO
# use monitor directly from console
-monitor stdio

# monitor control keys
C-a h    print this help
C-a x    exit emulator
C-a s    save disk data back to file (if -snapshot)
C-a t    toggle console timestamps
C-a b    send break (magic sysrq)
C-a c    switch between console and monitor
C-a C-a  sends C-a


# adding USB by host path:
device_add usb-host,hostbus=2,hostport=1.2.2,id=stuff
device_del stuff

# adding USB by VID:PID
device_add usb-host,vendorid=0x1234,productid=0x5678
# TODO: how to delete it?


#
# shared disk
#

# tool to share qemu disk images as a network block device (NDB)
qemu-nbd

# mounting qcow2 as a local disk:
modprobe nbd
qemu-nbd --connect=/dev/nbd0 disk.qcow2
fdisk /dev/nbd0 -l # list partitions
mkdir d1
mount /dev/nbd0p1 /mnt/qcow2
# ...
umount /mnt/qcow2
qemu-nbd --disconnect /dev/nbd0


# GPU virtualization:
-device virtio-vga,virgl=on
# GPU virtualization (the new way - untested; does not work on debian:11)
-device virtio-vga-gl
-display gtk,gl=on


# booting form USB disk image:
qemu-system-x86_64 \
  -usb \
  -device usb-storage,drive=foobar \
  -drive file=./debian-11.1.0-amd64-netinst.iso,if=none,id=foobar

# sharing directory between host and guest
qemu-system-x86_64 \
  ...
  -fsdev local,id=shared_dev,path=/path/to/shared/dir,security_model=none -device virtio-9p-pci,fsdev=shared_dev,mount_tag=shared_mount
  ...
# on Linux guest (msize is needed for better performance):
mount -t 9p -o trans=virtio shared_mount /mnt/shared/ -o msize=10485760
# on Windows guest (https://virtio-fs.gitlab.io/howto-windows.html):
1. get WinFsp (http://www.secfs.net/winfsp/rel/)
2. install it
3. use path "\\memfs64\share" in explorer
TODO: https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md


# changing root password on the qemu image on the fly:
apt install guestfs-tools
virt-customize -v -a my_dysk_image.qcow2 --root-password password:secr37


#
# snapshots
#
# all commands are to be ran using monitor

# save state as tag
savevm some_label

# restore state from tag
loadvm some_label

# list tags
info snapshots

# delete tag
delvm some_label


#
# pause / resume
#

# pause VM
stop
# or just:
s

# resume paused VM
cont
# or just:
c


#
# misc
#

# run arm64 image with chroot:
apt install qemu qemu-user-static binfmt-support
cp /usr/bin/qemu-aarch64-static /mnt/disk/usr/local/bin/
chroom /mnt/disk/usr/local/bin/


# forwarding USB device to guest
[...] -usb [...] -device usb-host,hostdevice=/dev/bus/usb/<bus>/<device> [...]
# for bus/device IDs check:
tree /dev/bus/usb/
# or (for web cams):
lsusb | grep -i camera
