# fast-forward branch w/o checking it out
git fetch bb master:master

# common ancestor of 2 branches (eg. for 3-way merge)
git merge-base branch2 branch3

# extract subdir as a separate repo
git clone XXX
cd XXX
git subtree split --prefix=some/dir/ --branch=extracted
cd some/new/repo
git init
git pull --allow-unrelated-histories /path/to/XXX repo

# remove anything but given dirs from repo's history
# (based on: https://cjohansen.no/git-subtree-multiple-dirs/)
git filter-branch -f --prune-empty --tree-filter 'find -type f -a ! \( -path "./foo/*" -o -path "./bar/*" \) -exec rm -f {} +'

# remove element (file/dir) from whole history
git filter-branch -f --prune-empty --index-filter 'git rm --cached --ignore-unmatch unrelevant* insecure*.txt *.unneeded'

# remove anything but given dirs from repo's history using filter-repo (preferred over filter-branch)
git filter-repo --path foo/xyz --path bar/abc

# remove element (file/dir) from whole history using filter-repo (preferred over filter-branch)
git filter-repo --path foo/xyz --path bar/abc --invert-paths

# faster alternative for filter-branch (now recommented by git project):
https://github.com/newren/git-filter-repo/

# change commit author
git commit --amend --author="foo bar <foo.bar@stu.ff>" --no-edit

# make script executable (eg. on Windows)
git update-index --chmod=+x my_script

# get latest tag on a current branch (eg: v1.2.3), with optional info, how far off from the tag the branch is (eg: v1.2.3-42-fabc12cc73):
git describe --tags
# get the latest tag on a current branch (eg: v1.2.3, even if it's in a distant past):
git describe --tags --abbrev=0
# list all tags associated with a given commit (here: HEAD):
git tag --points-at HEAD

# change path to a given remove repo
git remote set-url origin git@github.com:foo/bar.git

# remove tag from a remote repo
git push origin :refs/tags/<tag_to_be_removed>
# remove branch from a remote repo
git push origin :<branch_to_be_removed>

# find all branches, that contain a given commit
git br -a --contains abcdef

# cleanup remote branches, that have been removed from upstream
git remote prune origin

#
# code signing
#
apt install pinentry-curses

vi ~/.gitconfig
[user]
  name = bartek 'basz' szurgot
  email = git@baszerr.eu
  signingkey = 123456789ABCDEF
...
[commit]
  gpgsign = true

gpg-agent

# get nice abbreviation from git version, eg.: v0.2-210-g3a85b56696-dirty
git describe --always --abbrev=10 --dirty

# configure git to auto-update submodules when checking out differetn branches
git config --global submodule.recurse true
